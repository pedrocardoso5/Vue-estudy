{"remainingRequest":"/home/pedro/Documents/bolsa/site/Vue-estudy/low_cost_drum/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/pedro/Documents/bolsa/site/Vue-estudy/low_cost_drum/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/pedro/Documents/bolsa/site/Vue-estudy/low_cost_drum/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pedro/Documents/bolsa/site/Vue-estudy/low_cost_drum/src/views/sobre.vue?vue&type=template&id=ec7337e2&scoped=true&","dependencies":[{"path":"/home/pedro/Documents/bolsa/site/Vue-estudy/low_cost_drum/src/views/sobre.vue","mtime":1576576213824},{"path":"/home/pedro/Documents/bolsa/site/Vue-estudy/low_cost_drum/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pedro/Documents/bolsa/site/Vue-estudy/low_cost_drum/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/pedro/Documents/bolsa/site/Vue-estudy/low_cost_drum/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pedro/Documents/bolsa/site/Vue-estudy/low_cost_drum/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiYWJvdXQiIH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJiLWltZyIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE1MzMyODI5NjA1MzMtNTEzMjhhYTQ5ODI2P2l4bGliPXJiLTEuMi4xJml4aWQ9ZXlKaGNIQmZhV1FpT2pFeU1EZDkmYXV0bz1mb3JtYXQmZml0PWNyb3Amdz0xOTMwJnE9ODAiLAogICAgICAgICAgICAgIGZsdWlkOiAiIiwKICAgICAgICAgICAgICBhbHQ6ICJSZXNwb25zaXZlIGltYWdlIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiYi1jb250YWluZXIiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJidi1leGFtcGxlLXJvdyIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1oMSIgfSwgWwogICAgICAgICAgICBfYygiaDEiLCBbX3ZtLl92KCJRVUVNIFNPTU9TIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctMTAwIiB9KSwKICAgICAgICAgIF9jKCJiLXJvdyIsIHsgYXR0cnM6IHsgImFsaWduLXYiOiAiY2VudGVyIiwgImFsaWduLWgiOiAiZW5kIiB9IH0sIFsKICAgICAgICAgICAgX2MoImNvbnRlbnQiLCB7IHN0YXRpY0NsYXNzOiAiYWJvdXQtd3JpdGUiIH0sIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIE5vc3RydW0gZnVnYSBtaW51cyByZW0gb3B0aW8gc3VudCBsYWJvcmUgcXVhbSByZWN1c2FuZGFlLCB1dCBhIGJlYXRhZSByZXB1ZGlhbmRhZSBxdWFzaSBldW0gaXVzdG8gYXV0LCBvYmNhZWNhdGkgb21uaXMgdm9sdXB0YXR1bSBpdXJlIHRlbmV0dXIuTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gUXVhbSB0ZW5ldHVyIHZvbHVwdGF0dW0gYmVhdGFlLCBtYWduYW0gdW5kZSBzYWVwZSB2ZWxpdCByZXB1ZGlhbmRhZSBkb2xvcmVzIHF1aXMsIGN1bXF1ZSwgYXNzdW1lbmRhIGlwc2EgZnVnYSByZXJ1bSBhbGlxdWFtIGhpYz8gQXBlcmlhbSBjb25zZWN0ZXR1ciBuYW0gbnVsbGEhIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEEgcXVpcyBxdWlzcXVhbSBzdW50IHJlcHJlaGVuZGVyaXQgYXBlcmlhbSByZXJ1bSBpcHNhIGFsaXF1aWQgY29ycG9yaXMgcmVwZWxsYXQgbW9sZXN0aWFlIGF1dGVtIHN1c2NpcGl0IHRlbXBvcmlidXMsIG5lcXVlIGJsYW5kaXRpaXMgcGxhY2VhdCBkb2xvcmUgZXhwbGljYWJvLiBFdCwgcHJvdmlkZW50ISBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBMYWJvcmUgdmVsaXQgbmVxdWUgYXV0ZW0sIGV4ZXJjaXRhdGlvbmVtIHRlbXBvcmEgZXJyb3Igbm9zdHJ1bSwgcXVvLCBzYWVwZSBmdWdpdCBhdXQgbmFtIG5hdHVzIGlzdGUgZGljdGEgbWFnbmkgYWxpcXVpZCBwbGFjZWF0IHF1YWUgY29ycnVwdGk/IFF1b3MuICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctMTAwIiB9KSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYi1yb3ciLAogICAgICAgICAgICB7IGF0dHJzOiB7ICJhbGlnbi12IjogImNlbnRlciIsICJhbGlnbi1oIjogImVuZCIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImItY29sIiwgeyBhdHRyczogeyAiYWxpZ24tc2VsZiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIFF1YW0gdGVuZXR1ciB2b2x1cHRhdHVtIGJlYXRhZSwgbWFnbmFtIHVuZGUgc2FlcGUgdmVsaXQgcmVwdWRpYW5kYWUgZG9sb3JlcyBxdWlzLCBjdW1xdWUsIGFzc3VtZW5kYSBpcHNhIGZ1Z2EgcmVydW0gYWxpcXVhbSBoaWM/IEFwZXJpYW0gY29uc2VjdGV0dXIgbmFtIG51bGxhISBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBBIHF1aXMgcXVpc3F1YW0gc3VudCByZXByZWhlbmRlcml0IGFwZXJpYW0gcmVydW0gaXBzYSBhbGlxdWlkIGNvcnBvcmlzIHJlcGVsbGF0IG1vbGVzdGlhZSBhdXRlbSBzdXNjaXBpdCB0ZW1wb3JpYnVzLCBuZXF1ZSBibGFuZGl0aWlzIHBsYWNlYXQgZG9sb3JlIGV4cGxpY2Fiby4gRXQsIHByb3ZpZGVudCEgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gTGFib3JlIHZlbGl0IG5lcXVlIGF1dGVtLCBleGVyY2l0YXRpb25lbSB0ZW1wb3JhIGVycm9yIG5vc3RydW0sIHF1bywgc2FlcGUgZnVnaXQgYXV0IG5hbSBuYXR1cyBpc3RlIGRpY3RhIG1hZ25pIGFsaXF1aWQgcGxhY2VhdCBxdWFlIGNvcnJ1cHRpPyBRdW9zLiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyAiYWxpZ24tc2VsZiI6ICJjZW50ZXIiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImItaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJodHRwczovL2ltYWdlczIuaW1nYm94LmNvbS8zMi8xZS95azh6N1pVSF9vLmpwZyIsCiAgICAgICAgICAgICAgICAgICAgICBmbHVpZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJSZXNwb25zaXZlIGltYWdlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctMTAwIiB9KSwKICAgICAgICAgICAgICBfYygiYi1jb2wiLCBbCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gU2ludCBzYXBpZW50ZSwgYXNzdW1lbmRhIGVsaWdlbmRpIHNpdCBxdWFlcmF0IGFsaWFzIGRpY3RhIGludmVudG9yZSBleGVyY2l0YXRpb25lbSwgdml0YWUgYWRpcGlzY2kgbmlzaSBleCBxdWFtIGNvbnNlcXV1bnR1ciBjb21tb2RpIHNvbHV0YSBhc3BlcmlvcmVzIGZ1Z2EsIGVzc2UgcXVvcy4gTG9yZW0gaXBzdW0sIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEl0YXF1ZSBkZWJpdGlzIGNvbnNlcXVhdHVyIHF1b2Qgc2ludCBlc3QsIG9mZmljaWlzIGhpYyB2b2x1cHRhdGlidXMsIG1heGltZSB2aXRhZSB2b2x1cHRhdGVzIGZ1Z2l0IGV4Y2VwdHVyaSB1bmRlIGRpY3RhIGV2ZW5pZXQsIG5paGlsIHJlcnVtIHRlbmV0dXIgaXBzdW0gaW5jaWR1bnQuIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIE9tbmlzIGFsaWFzIG9kaW8gbWFpb3JlcyBlcnJvciByZXBlbGxlbmR1cywgb2ZmaWNpaXMgcHJvdmlkZW50IG1vZGkgcmVydW0gdXQgZWxpZ2VuZGkgaWxsdW0gcmVtIG5lc2NpdW50IHVsbGFtIHZvbHVwdGF0ZSBzYXBpZW50ZT8gUXVhc2kgY3VwaWRpdGF0ZSB2ZXJvIGFyY2hpdGVjdG8hIExvcmVtIGlwc3VtLCBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBUb3RhbSBmdWdpYXQgdWxsYW0gcXVpLiBFeGNlcHR1cmkgYWxpYXMgb2RpdCBzdW50IGVhcnVtIHVsbGFtIHZlcm8gc2FwaWVudGUgaXBzdW0gbGFib3JlIHJlcGVsbGF0IG1haW9yZXMgZmFjZXJlLCB0ZW5ldHVyIG51bGxhIGVzdCBxdWlidXNkYW0gZXhlcmNpdGF0aW9uZW0uIExvcmVtIGlwc3VtIGRvbG9yLCBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBOZWNlc3NpdGF0aWJ1cyBleHBsaWNhYm8gbmlzaSB0ZW5ldHVyIGZ1Z2l0IGVpdXMgY29uc2VxdWF0dXIgYXNwZXJpb3JlcyBoaWMgZW9zIGludmVudG9yZSBuZXNjaXVudC4gQ29ycG9yaXMgZXZlbmlldCwgcHJvdmlkZW50IHZvbHVwdGF0aWJ1cyByZXB1ZGlhbmRhZSBvZmZpY2lpcyBjdXBpZGl0YXRlIHZvbHVwdGF0ZSByZXBlbGxhdCB0ZW1wb3JpYnVzPyAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIFNpbnQgc2FwaWVudGUsIGFzc3VtZW5kYSBlbGlnZW5kaSBzaXQgcXVhZXJhdCBhbGlhcyBkaWN0YSBpbnZlbnRvcmUgZXhlcmNpdGF0aW9uZW0sIHZpdGFlIGFkaXBpc2NpIG5pc2kgZXggcXVhbSBjb25zZXF1dW50dXIgY29tbW9kaSBzb2x1dGEgYXNwZXJpb3JlcyBmdWdhLCBlc3NlIHF1b3MuIExvcmVtIGlwc3VtLCBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBJZCBhbGlhcywgbmVtbyBhdXRlbSBvcHRpbyBuYW0gdGVtcG9yZSBtb2xsaXRpYSBjb21tb2RpIHF1aXMgbnVtcXVhbSByZXJ1bSBxdWFtIGF1dCBkb2xvcmlidXMgcXVhZXJhdCBpcHNhbSBxdWlkZW0gZGVsZW5pdGkgY29uc2VjdGV0dXIgcmVpY2llbmRpcyBxdWlhLiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBPZmZpY2lhLCB2b2x1cHRhdGVzIGFyY2hpdGVjdG8uIEV4cGxpY2FibyBhbWV0LCBkaXN0aW5jdGlvIHVuZGUgdmVybyBwZXJzcGljaWF0aXMgbWluaW1hIHJlcGVsbGVuZHVzIHNvbHV0YSBpbnZlbnRvcmUgbW9sZXN0aWFzIGxhYm9ydW0gdGVtcG9yYSBjb3JydXB0aSwgZXhwZWRpdGEgbWFnbmFtIGltcGVkaXQgZnVnaXQgaXN0ZS4gTG9yZW0gaXBzdW0sIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEl0YXF1ZSBkZWJpdGlzIGNvbnNlcXVhdHVyIHF1b2Qgc2ludCBlc3QsIG9mZmljaWlzIGhpYyB2b2x1cHRhdGlidXMsIG1heGltZSB2aXRhZSB2b2x1cHRhdGVzIGZ1Z2l0IGV4Y2VwdHVyaSB1bmRlIGRpY3RhIGV2ZW5pZXQsIG5paGlsIHJlcnVtIHRlbmV0dXIgaXBzdW0gaW5jaWR1bnQuIExvcmVtIGlwc3VtIGRvbG9yLCBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBOZWNlc3NpdGF0aWJ1cyBleHBsaWNhYm8gbmlzaSB0ZW5ldHVyIGZ1Z2l0IGVpdXMgY29uc2VxdWF0dXIgYXNwZXJpb3JlcyBoaWMgZW9zIGludmVudG9yZSBuZXNjaXVudC4gQ29ycG9yaXMgZXZlbmlldCwgcHJvdmlkZW50IHZvbHVwdGF0aWJ1cyByZXB1ZGlhbmRhZSBvZmZpY2lpcyBjdXBpZGl0YXRlIHZvbHVwdGF0ZSByZXBlbGxhdCB0ZW1wb3JpYnVzPyAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3LTEwMCIgfSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jb2wiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiYi1pbWciLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh0dHBzOi8vcGljc3VtLnBob3Rvcy8xMDI0LzQwMC8/aW1hZ2U9NDEiLAogICAgICAgICAgICAgICAgICAgICAgZmx1aWQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgYWx0OiAiUmVzcG9uc2l2ZSBpbWFnZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImItY29sIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIExvcmVtIGlwc3VtLCBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBFYXF1ZSBhdXRlbSByZXB1ZGlhbmRhZSBlaXVzIHZvbHVwdGFzIGlsbG8uIElkIG5hdHVzIHN1c2NpcGl0IGN1bHBhIGFsaXF1aWQgY29tbW9kaSBpbGxvIGEgc2ludCBleGVyY2l0YXRpb25lbSBpbiBuZWNlc3NpdGF0aWJ1cywgb2ZmaWNpYSBoaWMgcXVvcyBkaXN0aW5jdGlvLiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBGdWdpdCBkdWNpbXVzIG9iY2FlY2F0aSBpbmNpZHVudCBmYWNlcmUgbmVtbyBpdGFxdWUgaXBzYSBudWxsYSBpcHNhbSByZXByZWhlbmRlcml0IGF0cXVlIHZpdGFlLCBjdW0gZG9sb3IgYW5pbWkgZnVnaWF0IHBvcnJvIHByYWVzZW50aXVtIHNpbnQgbm9iaXMgZXhwbGljYWJvLiBMb3JlbSBpcHN1bSBkb2xvciBzaXQsIGFtZXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gTm9iaXMgZnVnaXQgZXVtIGFsaXF1aWQgcmVtISBGdWdpYXQgcmVydW0gY3VtIHNpbWlsaXF1ZSBuYW0gbGFib3JlIHF1aSBpbGxvLCBkb2xvciBleCBpdXJlIHZvbHVwdGF0aWJ1cyBmdWdpdCBhbGlhcyBxdWlzcXVhbSBleHBlZGl0YSBkaXN0aW5jdGlvLiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3LTEwMCIgfSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gQXNwZXJuYXR1ciBpbnZlbnRvcmUgaXVzdG8gc2l0IHRlbXBvcmEgbGFib3Jpb3NhbSBhYiBub3N0cnVtLiBJbmNpZHVudCwgdGVtcG9yYSBldmVuaWV0IHZvbHVwdGF0aWJ1cyBkaWN0YSwgYXNzdW1lbmRhLCBjdXBpZGl0YXRlIGVpdXMgYWNjdXNhbnRpdW0gc2FwaWVudGUgbm9iaXMgbGFib3J1bSBwZXJmZXJlbmRpcyBzdW50LiBMb3JlbSBpcHN1bSwgZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gSWxsbyBhbGlxdWlkIHBlcmZlcmVuZGlzIGxpYmVybyBzdXNjaXBpdCBkZWJpdGlzIGFtZXQsIG9tbmlzIG1pbnVzPyBBcGVyaWFtIGRpY3RhIG1vZGkgdmVyaXRhdGlzIGN1cGlkaXRhdGUsIHNpbnQgcG9zc2ltdXMgbm9uIHBvcnJvLCBxdWksIHJlcGVsbGVuZHVzIGVzc2UgaW4uIExvcmVtLCBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBSZXBlbGxhdCBjb25zZXF1YXR1ciBlb3MgY3VtcXVlIG1hZ25pIGVsaWdlbmRpIHBsYWNlYXQgYXRxdWUsIGFkIGR1Y2ltdXMgcmVydW0gcXVpZGVtIHF1YW0gdm9sdXB0YXRlcyBhc3BlcmlvcmVzLCBpcHN1bSB2b2x1cHRhcyBkaWN0YSBpc3RlIG5vc3RydW0sIHZlcml0YXRpcyBldD8gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}